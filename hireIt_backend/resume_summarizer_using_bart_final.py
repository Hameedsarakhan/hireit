# -*- coding: utf-8 -*-
"""Resume_Summarizer_using_BART_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bVmkyJjj69Yphp9kolfFGceaG_DWxgg6

**INSTALLING DEPENDENCIES**
"""
"""**IMPORTING DEPENDENCIES**"""

from tika import parser
import warnings
warnings.filterwarnings("ignore")
from transformers import BartForConditionalGeneration, BartTokenizer

"""**INPUT RESUME**"""

resume_summary= {}

"""**PDF TO TEXT**"""

def pdf_to_text(resume_path):
      file_data = parser.from_file(resume_path)
      text = file_data['content']
      return text

"""**BART SUMMARIZER**"""

def BertSummarize(resume_path):
    bart_tokenizer = BartTokenizer.from_pretrained('facebook/bart-large-cnn')
    bart_model = BartForConditionalGeneration.from_pretrained('facebook/bart-large-cnn')

    inputs = bart_tokenizer.encode("summarize: " + str(resume_path), return_tensors="pt", max_length=1024, truncation=True)

    # Generate summary
    summary_ids = bart_model.generate(inputs, max_length=150, min_length=60, length_penalty=2.0, num_beams=4, early_stopping=True)
    summary = bart_tokenizer.decode(summary_ids[0], skip_special_tokens=True)

    # Update the summary in the dictionary
    if not summary:
        resume_summary[resume_path] = "No Summary Available"
    else:
        resume_summary[resume_path] = summary
    
    return(resume_summary)



"""**PRINTING DICT**"""



